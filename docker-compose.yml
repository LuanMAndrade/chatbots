services:
  evolution-api:
    container_name: evolution_api
    image: evoapicloud/evolution-api:latest
    restart: always
    ports:
      - 8081:8080
    volumes:
      - lab_evolution_instances:/lab_evolution/instances
    networks:
      - lab_evolution
    env_file:
      - .env

  postgres:
    image: postgres:16  # ALTERADO: de 13 para 16 (compatível com Django 4.2+)
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - lab_evolution
    healthcheck:  # ADICIONADO: verificação de saúde do PostgreSQL
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  django_app:
    build: ./django_project
    container_name: chatbot_manager_app
    restart: always
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./django_project:/app
      - /root/chatbots:/root/chatbots
      - /etc/systemd/system:/etc/systemd/system
    ports:
      - "8000:8000"
    env_file:
      - .env  # ADICIONADO: carrega as variáveis de ambiente
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - lab_evolution

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6380:6379"
    networks:
      - lab_evolution

volumes:
  lab_evolution_instances:
  pg_data:

networks:
  lab_evolution:
    driver: bridge